{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\breno\\\\Desktop\\\\react-findr\\\\src\\\\components\\\\findr-autocomplete.jsx\",\n    _s = $RefreshSig$();\n\nimport { AutoComplete } from 'primereact/autocomplete';\nimport { useEffect, useState } from 'react';\nimport { AutoCompleteService } from './findr-autocomplete-service';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst countryservice = new AutoCompleteService();\n\nfunction FindrAutocomplete() {\n  _s();\n\n  const [countries, setCountries] = useState([]);\n  const [selectedCountry1, setSelectedCountry1] = useState([]);\n  const [filteredCountries, setFilteredCountries] = useState([]);\n  useEffect(() => {\n    countryservice.getCountries().then(data => setCountries(data));\n    console.log(\"data,\", countries);\n  }, []);\n\n  const searchCountry = event => {\n    setTimeout(() => {\n      let _filteredCountries;\n\n      if (!event.query.trim().length) {\n        _filteredCountries = [...countries];\n      } else {\n        _filteredCountries = countries.filter(country => {\n          console.log(\"prova\", country.name);\n          return country.name.toLowerCase().startsWith(event.query.toLowerCase());\n        });\n      }\n\n      setFilteredCountries(_filteredCountries);\n    }, 250);\n  };\n\n  return /*#__PURE__*/_jsxDEV(_Fragment, {\n    children: /*#__PURE__*/_jsxDEV(AutoComplete, {\n      value: selectedCountry1,\n      suggestions: filteredCountries,\n      completeMethod: searchCountry,\n      field: \"name\",\n      onChange: e => setSelectedCountry1(e.value),\n      \"aria-label\": \"Countries\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 35,\n      columnNumber: 5\n    }, this)\n  }, void 0, false);\n}\n\n_s(FindrAutocomplete, \"medANlhHZ720mSETIDekd3MCz4o=\");\n\n_c = FindrAutocomplete;\nexport default FindrAutocomplete;\n\nvar _c;\n\n$RefreshReg$(_c, \"FindrAutocomplete\");","map":{"version":3,"names":["AutoComplete","useEffect","useState","AutoCompleteService","countryservice","FindrAutocomplete","countries","setCountries","selectedCountry1","setSelectedCountry1","filteredCountries","setFilteredCountries","getCountries","then","data","console","log","searchCountry","event","setTimeout","_filteredCountries","query","trim","length","filter","country","name","toLowerCase","startsWith","e","value"],"sources":["C:/Users/breno/Desktop/react-findr/src/components/findr-autocomplete.jsx"],"sourcesContent":["import { AutoComplete } from 'primereact/autocomplete';\r\nimport { useEffect, useState } from 'react';\r\nimport { AutoCompleteService } from './findr-autocomplete-service';\r\nconst countryservice = new AutoCompleteService();\r\n\r\nfunction FindrAutocomplete() {\r\n    const [countries, setCountries] = useState([]);\r\n    const [selectedCountry1, setSelectedCountry1] = useState([]);\r\n    const [filteredCountries, setFilteredCountries] = useState([]);\r\n\r\n    useEffect(() => {\r\n        countryservice.getCountries().then(data => setCountries(data));\r\n        console.log(\"data,\", countries);\r\n    }, []); \r\n\r\n    const searchCountry = (event) => {\r\n        setTimeout(() => {\r\n            let _filteredCountries;\r\n            if (!event.query.trim().length) {\r\n                _filteredCountries = [...countries];\r\n            }\r\n            else {\r\n                _filteredCountries = countries.filter((country) => {\r\n                    console.log(\"prova\", country.name)\r\n                    return country.name.toLowerCase().startsWith(event.query.toLowerCase());\r\n                });\r\n            }\r\n\r\n            setFilteredCountries(_filteredCountries);\r\n        }, 250);\r\n    }\r\n\r\n    return (\r\n    <>\r\n    <AutoComplete value={selectedCountry1} suggestions={filteredCountries} completeMethod={searchCountry} field=\"name\" onChange={(e) => setSelectedCountry1(e.value)} aria-label=\"Countries\" />\r\n    </>  \r\n    );\r\n\r\n}\r\n\r\nexport default FindrAutocomplete;"],"mappings":";;;AAAA,SAASA,YAAT,QAA6B,yBAA7B;AACA,SAASC,SAAT,EAAoBC,QAApB,QAAoC,OAApC;AACA,SAASC,mBAAT,QAAoC,8BAApC;;;AACA,MAAMC,cAAc,GAAG,IAAID,mBAAJ,EAAvB;;AAEA,SAASE,iBAAT,GAA6B;EAAA;;EACzB,MAAM,CAACC,SAAD,EAAYC,YAAZ,IAA4BL,QAAQ,CAAC,EAAD,CAA1C;EACA,MAAM,CAACM,gBAAD,EAAmBC,mBAAnB,IAA0CP,QAAQ,CAAC,EAAD,CAAxD;EACA,MAAM,CAACQ,iBAAD,EAAoBC,oBAApB,IAA4CT,QAAQ,CAAC,EAAD,CAA1D;EAEAD,SAAS,CAAC,MAAM;IACZG,cAAc,CAACQ,YAAf,GAA8BC,IAA9B,CAAmCC,IAAI,IAAIP,YAAY,CAACO,IAAD,CAAvD;IACAC,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBV,SAArB;EACH,CAHQ,EAGN,EAHM,CAAT;;EAKA,MAAMW,aAAa,GAAIC,KAAD,IAAW;IAC7BC,UAAU,CAAC,MAAM;MACb,IAAIC,kBAAJ;;MACA,IAAI,CAACF,KAAK,CAACG,KAAN,CAAYC,IAAZ,GAAmBC,MAAxB,EAAgC;QAC5BH,kBAAkB,GAAG,CAAC,GAAGd,SAAJ,CAArB;MACH,CAFD,MAGK;QACDc,kBAAkB,GAAGd,SAAS,CAACkB,MAAV,CAAkBC,OAAD,IAAa;UAC/CV,OAAO,CAACC,GAAR,CAAY,OAAZ,EAAqBS,OAAO,CAACC,IAA7B;UACA,OAAOD,OAAO,CAACC,IAAR,CAAaC,WAAb,GAA2BC,UAA3B,CAAsCV,KAAK,CAACG,KAAN,CAAYM,WAAZ,EAAtC,CAAP;QACH,CAHoB,CAArB;MAIH;;MAEDhB,oBAAoB,CAACS,kBAAD,CAApB;IACH,CAbS,EAaP,GAbO,CAAV;EAcH,CAfD;;EAiBA,oBACA;IAAA,uBACA,QAAC,YAAD;MAAc,KAAK,EAAEZ,gBAArB;MAAuC,WAAW,EAAEE,iBAApD;MAAuE,cAAc,EAAEO,aAAvF;MAAsG,KAAK,EAAC,MAA5G;MAAmH,QAAQ,EAAGY,CAAD,IAAOpB,mBAAmB,CAACoB,CAAC,CAACC,KAAH,CAAvJ;MAAkK,cAAW;IAA7K;MAAA;MAAA;MAAA;IAAA;EADA,iBADA;AAMH;;GAjCQzB,iB;;KAAAA,iB;AAmCT,eAAeA,iBAAf"},"metadata":{},"sourceType":"module"}